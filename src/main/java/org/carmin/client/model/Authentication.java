/*
 * CARMIN a Common web API for Remote pipeline INvocation
 * FLI/IAM REST API for exchanging data and remote calling pipelines.
 *
 * OpenAPI spec version: 0.2.1
 * Contact: carmin@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.carmin.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

public class Authentication {

  @SerializedName("httpHeader")
  private String httpHeader = null;

  @SerializedName("httpHeaderValue")
  private String httpHeaderValue = null;

  public Authentication httpHeader(String httpHeader) {
    this.httpHeader= httpHeader;
    return this;
  }

  @ApiModelProperty(example = "null", required = true, value = "")
  public String getHttpHeader() {
    return httpHeader;
  }

  public void setHttpHeader(String httpHeader) {
    this.httpHeader = httpHeader;
  }

  public Authentication httpHeaderValue(String httpHeaderValue) {
    this.httpHeaderValue = httpHeaderValue;
    return this;
  }

  @ApiModelProperty(example = "null", required = true, value = "")
  public String getHttpHeaderValue() {
    return httpHeaderValue;
  }

  public void setHttpHeaderValue(String httpHeaderValue) {
    this.httpHeaderValue = httpHeaderValue;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authentication authentication = (Authentication) o;
    return Objects.equals(this.httpHeader, authentication.httpHeader) &&
        Objects.equals(this.httpHeaderValue, authentication.httpHeaderValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpHeader, httpHeaderValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authentication {\n");

    sb.append("    httpHeader: ").append(toIndentedString(httpHeader)).append("\n");
    sb.append("    httpHeaderValue: ").append(toIndentedString(httpHeaderValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

