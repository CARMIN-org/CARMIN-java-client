/*
 * CARMIN a Common web API for Remote pipeline INvocation
 * FLI/IAM REST API for exchanging data and remote calling pipelines.
 *
 * OpenAPI spec version: 0.2.1
 * Contact: carmin@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.carmin.client.api;

import org.carmin.client.ApiCallback;
import org.carmin.client.ApiClient;
import org.carmin.client.ApiException;
import org.carmin.client.ApiResponse;
import org.carmin.client.Configuration;
import org.carmin.client.Pair;
import org.carmin.client.ProgressRequestBody;
import org.carmin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.*;


import org.carmin.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getPlatformProperties */
    private com.squareup.okhttp.Call getPlatformPropertiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlatformPropertiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getPlatformPropertiesCall(progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Returns information about the platform. https must be supported in the list of the supported protocols.
     * @return PlatformProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlatformProperties getPlatformProperties() throws ApiException {
        ApiResponse<PlatformProperties> resp = getPlatformPropertiesWithHttpInfo();
        return resp.getData();
    }

    /**
     *
     * Returns information about the platform. https must be supported in the list of the supported protocols.
     * @return ApiResponse&lt;PlatformProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlatformProperties> getPlatformPropertiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPlatformPropertiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PlatformProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the platform. https must be supported in the list of the supported protocols.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlatformPropertiesAsync(final ApiCallback<PlatformProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlatformPropertiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlatformProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for authenticate */
    private com.squareup.okhttp.Call authenticateCall(AuthenticationCredentials body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/authenticate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticateValidateBeforeCall(AuthenticationCredentials body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling authenticate(Async)");
        }

        com.squareup.okhttp.Call call = authenticateCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Returns the api key necessary to use the API.
     * @return Authentication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Authentication authenticate(AuthenticationCredentials body) throws ApiException {
        ApiResponse<Authentication> resp = authenticateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     *
     * Returns the api key necessary to use the API.
     * @return ApiResponse&lt;Authentication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Authentication> authenticateWithHttpInfo(AuthenticationCredentials body) throws ApiException {
        com.squareup.okhttp.Call call = authenticateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Authentication>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the api key necessary to use the API.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticateAsync(AuthenticationCredentials body, final ApiCallback<Authentication> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Authentication>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for listExecutions */
    private com.squareup.okhttp.Call listExecutionsCall(String studyIdentifier, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (studyIdentifier != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "studyIdentifier", studyIdentifier));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listExecutionsValidateBeforeCall(String studyIdentifier, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = listExecutionsCall(studyIdentifier, offset, limit, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * list all execution Ids in the platform which are ordered in decreasing submission time. All the executions that were launched by the user must be returned. It is up to the platform to return executions that the user did not launch. When studyIdentifier is present, all the executions that the user launched in the study must be returned.
     * @return List&lt;Execution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Execution> listExecutions(String studyIdentifier, String offset, String limit) throws ApiException {
        ApiResponse<List<Execution>> resp = listExecutionsWithHttpInfo(studyIdentifier, offset, limit);
        return resp.getData();
    }

    /**
     *
     * list all execution Ids in the platform which are ordered in decreasing submission time. All the executions that were launched by the user must be returned. It is up to the platform to return executions that the user did not launch. When studyIdentifier is present, all the executions that the user launched in the study must be returned.
     * @return ApiResponse&lt;List&lt;Execution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Execution>> listExecutionsWithHttpInfo(String studyIdentifier, String offset, String limit) throws ApiException {
        com.squareup.okhttp.Call call = listExecutionsValidateBeforeCall(studyIdentifier, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<Execution>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * list all execution Ids in the platform which are ordered in decreasing submission time. All the executions that were launched by the user must be returned. It is up to the platform to return executions that the user did not launch. When studyIdentifier is present, all the executions that the user launched in the study must be returned.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listExecutionsAsync(String studyIdentifier, String offset, String limit, final ApiCallback<List<Execution>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listExecutionsValidateBeforeCall(studyIdentifier, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Execution>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for initExecution */
    private com.squareup.okhttp.Call initExecutionCall(Execution body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/executions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initExecutionValidateBeforeCall(Execution body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initExecution(Async)");
        }


        com.squareup.okhttp.Call call = initExecutionCall(body, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Initializes an execution. Does not start it. The successful response must contain the execution identifier.
     * @param body  (required)
     * @return Execution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Execution initExecution(Execution body) throws ApiException {
        ApiResponse<Execution> resp = initExecutionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     *
     * Initializes an execution. Does not start it. The successful response must contain the execution identifier.
     * @param body  (required)
     * @return ApiResponse&lt;Execution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Execution> initExecutionWithHttpInfo(Execution body) throws ApiException {
        com.squareup.okhttp.Call call = initExecutionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }
    /**
     *  (asynchronously)
     * Initializes an execution. Does not start it. The successful response must contain the execution identifier.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initExecutionAsync(Execution body, final ApiCallback<Execution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initExecutionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for countExecutions */
    private com.squareup.okhttp.Call countExecutionsCall(String studyIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/count".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (studyIdentifier != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "studyIdentifier", studyIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countExecutionsValidateBeforeCall(String studyIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = countExecutionsCall(studyIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Give the number of the user's executions
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer countExecutions(String studyIdentifier) throws ApiException {
        ApiResponse<Integer> resp = countExecutionsWithHttpInfo(studyIdentifier);
        return resp.getData();
    }

    /**
     *
     * Give the number of the user's executions
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> countExecutionsWithHttpInfo(String studyIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = countExecutionsValidateBeforeCall(studyIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Give the number of the user's executions
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countExecutionsAsync(String studyIdentifier, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countExecutionsValidateBeforeCall(studyIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getExecution */
    private com.squareup.okhttp.Call getExecutionCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExecutionValidateBeforeCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling getExecution(Async)");
        }


        com.squareup.okhttp.Call call = getExecutionCall(executionIdentifier, progressListener, progressRequestListener);
        return call;





    }
    /**
     *
     * get information about an execution
     * @param executionIdentifier  (required)
     * @return Execution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Execution getExecution(String executionIdentifier) throws ApiException {
        ApiResponse<Execution> resp = getExecutionWithHttpInfo(executionIdentifier);
        return resp.getData();
    }

    /**
     *
     * get information about an execution
     * @param executionIdentifier  (required)
     * @return ApiResponse&lt;Execution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Execution> getExecutionWithHttpInfo(String executionIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getExecutionValidateBeforeCall(executionIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get information about an execution
     * @param executionIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExecutionAsync(String executionIdentifier, final ApiCallback<Execution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExecutionValidateBeforeCall(executionIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for updateExecution */
    private com.squareup.okhttp.Call updateExecutionCall(String executionIdentifier, Execution body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExecutionValidateBeforeCall(String executionIdentifier, Execution body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling updateExecution(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExecution(Async)");
        }


        com.squareup.okhttp.Call call = updateExecutionCall(executionIdentifier, body, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Modify an execution. Only the name and the timeout of the execution can be modified. Changes to the identifier or the status will raise errors. Changes to the other properties will be ignored.
     * @param executionIdentifier  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExecution(String executionIdentifier, Execution body) throws ApiException {
        updateExecutionWithHttpInfo(executionIdentifier, body);
    }

    /**
     *
     * Modify an execution. Only the name and the timeout of the execution can be modified. Changes to the identifier or the status will raise errors. Changes to the other properties will be ignored.
     * @param executionIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExecutionWithHttpInfo(String executionIdentifier, Execution body) throws ApiException {
        com.squareup.okhttp.Call call = updateExecutionValidateBeforeCall(executionIdentifier, body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify an execution. Only the name and the timeout of the execution can be modified. Changes to the identifier or the status will raise errors. Changes to the other properties will be ignored.
     * @param executionIdentifier  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExecutionAsync(String executionIdentifier, Execution body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExecutionValidateBeforeCall(executionIdentifier, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for deleteExecution */
    private com.squareup.okhttp.Call deleteExecutionCall(String executionIdentifier, Boolean deleteFiles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/delete".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deleteFiles != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "deleteFiles", deleteFiles));


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExecutionValidateBeforeCall(String executionIdentifier, Boolean deleteFiles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling deleteExecution(Async)");
        }


        com.squareup.okhttp.Call call = deleteExecutionCall(executionIdentifier, deleteFiles, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Delete an execution. This will kill the underlying processes (if possible) and free all resources associated with this execution (depending of the configuration given in as body input).
     * @param executionIdentifier  (required)
     * @param deleteFiles delete configuration (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExecution(String executionIdentifier, Boolean deleteFiles) throws ApiException {
        deleteExecutionWithHttpInfo(executionIdentifier, deleteFiles);
    }

    /**
     *
     * Delete an execution. This will kill the underlying processes (if possible) and free all resources associated with this execution (depending of the configuration given in as body input).
     * @param executionIdentifier  (required)
     * @param deleteFiles delete configuration (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExecutionWithHttpInfo(String executionIdentifier, Boolean deleteFiles) throws ApiException {
        com.squareup.okhttp.Call call = deleteExecutionValidateBeforeCall(executionIdentifier, deleteFiles, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an execution. This will kill the underlying processes (if possible) and free all resources associated with this execution (depending of the configuration given in as body input).
     * @param executionIdentifier  (required)
     * @param deleteFiles delete configuration (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExecutionAsync(String executionIdentifier, Boolean deleteFiles, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExecutionValidateBeforeCall(executionIdentifier, deleteFiles, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for getExecutionResults */
    private com.squareup.okhttp.Call getExecutionResultsCall(String executionIdentifier, String protocol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/results".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (protocol != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "protocol", protocol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExecutionResultsValidateBeforeCall(String executionIdentifier, String protocol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling getExecutionResults(Async)");
        }


        com.squareup.okhttp.Call call = getExecutionResultsCall(executionIdentifier, protocol, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * get the result files of the execution
     * @param executionIdentifier  (required)
     * @param protocol if not specified the default protocol is https (optional)
     * @return List&lt;Path&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Path> getExecutionResults(String executionIdentifier, String protocol) throws ApiException {
        ApiResponse<List<Path>> resp = getExecutionResultsWithHttpInfo(executionIdentifier, protocol);
        return resp.getData();
    }

    /**
     *
     * get the result files of the execution
     * @param executionIdentifier  (required)
     * @param protocol if not specified the default protocol is https (optional)
     * @return ApiResponse&lt;List&lt;Path&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Path>> getExecutionResultsWithHttpInfo(String executionIdentifier, String protocol) throws ApiException {
        com.squareup.okhttp.Call call = getExecutionResultsValidateBeforeCall(executionIdentifier, protocol, null, null);
        Type localVarReturnType = new TypeToken<List<Path>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the result files of the execution
     * @param executionIdentifier  (required)
     * @param protocol if not specified the default protocol is https (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExecutionResultsAsync(String executionIdentifier, String protocol, final ApiCallback<List<Path>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExecutionResultsValidateBeforeCall(executionIdentifier, protocol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Path>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getStdout */
    private com.squareup.okhttp.Call getStdoutCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/stdout".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStdoutValidateBeforeCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling getStdout(Async)");
        }


        com.squareup.okhttp.Call call = getStdoutCall(executionIdentifier, progressListener, progressRequestListener);
        return call;





    }
    /**
     *
     * get stdout of an execution
     * @param executionIdentifier  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getStdout(String executionIdentifier) throws ApiException {
        ApiResponse<String> resp = getStdoutWithHttpInfo(executionIdentifier);
        return resp.getData();
    }

    /**
     *
     * get stdout of an execution
     * @param executionIdentifier  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getStdoutWithHttpInfo(String executionIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getStdoutValidateBeforeCall(executionIdentifier, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get stdout of an execution
     * @param executionIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStdoutAsync(String executionIdentifier, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStdoutValidateBeforeCall(executionIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStderr */
    private com.squareup.okhttp.Call getStderrCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/stderr".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStderrValidateBeforeCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling getStderr(Async)");
        }


        com.squareup.okhttp.Call call = getStderrCall(executionIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * get stderr of an execution
     * @param executionIdentifier  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getStderr(String executionIdentifier) throws ApiException {
        ApiResponse<String> resp = getStderrWithHttpInfo(executionIdentifier);
        return resp.getData();
    }

    /**
     *
     * get stderr of an execution
     * @param executionIdentifier  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getStderrWithHttpInfo(String executionIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getStderrValidateBeforeCall(executionIdentifier, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get stderr of an execution
     * @param executionIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStderrAsync(String executionIdentifier, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStderrValidateBeforeCall(executionIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for playExecution */
    private com.squareup.okhttp.Call playExecutionCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/play".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playExecutionValidateBeforeCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling playExecution(Async)");
        }


        com.squareup.okhttp.Call call = playExecutionCall(executionIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * play an execution
     * @param executionIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void playExecution(String executionIdentifier) throws ApiException {
        playExecutionWithHttpInfo(executionIdentifier);
    }

    /**
     *
     * play an execution
     * @param executionIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> playExecutionWithHttpInfo(String executionIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = playExecutionValidateBeforeCall(executionIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * play an execution
     * @param executionIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playExecutionAsync(String executionIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playExecutionValidateBeforeCall(executionIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for killExecution */
    private com.squareup.okhttp.Call killExecutionCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/executions/{executionIdentifier}/kill".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionIdentifier" + "\\}", apiClient.escapeString(executionIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call killExecutionValidateBeforeCall(String executionIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'executionIdentifier' is set
        if (executionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'executionIdentifier' when calling killExecution(Async)");
        }


        com.squareup.okhttp.Call call = killExecutionCall(executionIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * kill an execution
     * @param executionIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void killExecution(String executionIdentifier) throws ApiException {
        killExecutionWithHttpInfo(executionIdentifier);
    }
    /**
     *
     * kill an execution
     * @param executionIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> killExecutionWithHttpInfo(String executionIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = killExecutionValidateBeforeCall(executionIdentifier, null, null);
        return apiClient.execute(call);
    }
    /**
     *  (asynchronously)
     * kill an execution
     * @param executionIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call killExecutionAsync(String executionIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = killExecutionValidateBeforeCall(executionIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for listPipelines */
    private com.squareup.okhttp.Call listPipelinesCall(String studyIdentifier, String property, String propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipelines".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (studyIdentifier != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "studyIdentifier", studyIdentifier));
        if (property != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "property", property));
        if (propertyValue != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "propertyValue", propertyValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPipelinesValidateBeforeCall(String studyIdentifier, String property, String propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = listPipelinesCall(studyIdentifier, property, propertyValue, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * All the pipelines that the user can execute must be returned. It is up to the platform to return pipelines that the user cannot execute. When studyIdentifier is present, all the pipelines that the user can execute in the study must be returned. In this case, execution rights denote the rights to execute the pipeline in the study.
     * @param studyIdentifier  (optional)
     * @return List&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Pipeline> listPipelines(String studyIdentifier, String property, String propertyValue) throws ApiException {
        ApiResponse<List<Pipeline>> resp = listPipelinesWithHttpInfo(studyIdentifier, property, propertyValue);
        return resp.getData();
    }
    /**
     *
     * All the pipelines that the user can execute must be returned. It is up to the platform to return pipelines that the user cannot execute. When studyIdentifier is present, all the pipelines that the user can execute in the study must be returned. In this case, execution rights denote the rights to execute the pipeline in the study.
     * @param studyIdentifier  (optional)
     * @return ApiResponse&lt;List&lt;Pipeline&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Pipeline>> listPipelinesWithHttpInfo(String studyIdentifier, String property, String propertyValue) throws ApiException {
        com.squareup.okhttp.Call call = listPipelinesValidateBeforeCall(studyIdentifier, property, propertyValue, null, null);
        Type localVarReturnType = new TypeToken<List<Pipeline>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * All the pipelines that the user can execute must be returned. It is up to the platform to return pipelines that the user cannot execute. When studyIdentifier is present, all the pipelines that the user can execute in the study must be returned. In this case, execution rights denote the rights to execute the pipeline in the study.
     * @param studyIdentifier  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPipelinesAsync(String studyIdentifier, String property, String propertyValue, final ApiCallback<List<Pipeline>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPipelinesValidateBeforeCall(studyIdentifier, property, propertyValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Pipeline>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getPipeline */
    private com.squareup.okhttp.Call getPipelineCall(String pipelineIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipelines/{pipelineIdentifier}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineValidateBeforeCall(String pipelineIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipeline(Async)");
        }


        com.squareup.okhttp.Call call = getPipelineCall(pipelineIdentifier, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * Show the definition of a given pipeline
     * @param pipelineIdentifier pipeline identifier (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pipeline getPipeline(String pipelineIdentifier) throws ApiException {
        ApiResponse<Pipeline> resp = getPipelineWithHttpInfo(pipelineIdentifier);
        return resp.getData();
    }

    /**
     *
     * Show the definition of a given pipeline
     * @param pipelineIdentifier pipeline identifier (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pipeline> getPipelineWithHttpInfo(String pipelineIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineValidateBeforeCall(pipelineIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Show the definition of a given pipeline
     * @param pipelineIdentifier pipeline identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineAsync(String pipelineIdentifier, final ApiCallback<Pipeline> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineValidateBeforeCall(pipelineIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /** data **/


    /* Build call for getPathContent */
    private com.squareup.okhttp.Call getPathContentCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "action", "content"));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPathContentValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling getPathContent(Async)");
        }


        com.squareup.okhttp.Call call = getPathContentCall(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * download a raw file
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPathContent(String completePath) throws ApiException {
        ApiResponse<File> resp = getPathContentWithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * download a raw file
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPathContentWithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = getPathContentValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * download a raw file
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPathContentAsync(String completePath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPathContentValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getPathExists */
    private com.squareup.okhttp.Call getPathExistsCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "action", "exists"));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPathExistsValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling getPathExists(Async)");
        }


        com.squareup.okhttp.Call call = getPathExistsCall(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * indicate if the path exists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BooleanResponse getPathExists(String completePath) throws ApiException {
        ApiResponse<BooleanResponse> resp = getPathExistsWithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * indicate if the path exists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BooleanResponse> getPathExistsWithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = getPathExistsValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * indicate if the path exists
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPathExistsAsync(String completePath, final ApiCallback<BooleanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPathExistsValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getPathProperties */
    private com.squareup.okhttp.Call getPathPropertiesCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "action", "properties"));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPathPropertiesValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling getPathProperties(Async)");
        }


        com.squareup.okhttp.Call call = getPathPropertiesCall(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * give information about a path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path getPathProperties(String completePath) throws ApiException {
        ApiResponse<Path> resp = getPathPropertiesWithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * give information about a path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> getPathPropertiesWithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = getPathPropertiesValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * give information about a path
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPathPropertiesAsync(String completePath, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPathPropertiesValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }



    /* Build call for getPathList */
    private com.squareup.okhttp.Call getPathListCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "action", "list"));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPathListValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling getPathList(Async)");
        }


        com.squareup.okhttp.Call call = getPathListCall(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * list the sub-paths of a directory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Path> getPathList(String completePath) throws ApiException {
        ApiResponse<List<Path>> resp = getPathListWithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * list the sub-paths of a directory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Path>> getPathListWithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = getPathListValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<List<Path>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * list the sub-paths of a directory
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPathListAsync(String completePath, final ApiCallback<List<Path>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPathListValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Path>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getPathMd5 */
    private com.squareup.okhttp.Call getPathMd5Call(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "action", "md5"));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPathMd5ValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling getPathMd5(Async)");
        }


        com.squareup.okhttp.Call call = getPathMd5Call(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * give information about a path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PathMd5 getPathMd5(String completePath) throws ApiException {
        ApiResponse<PathMd5> resp = getPathMd5WithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * give information about a path
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PathMd5> getPathMd5WithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = getPathMd5ValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<PathMd5>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * give information about a path
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPathMd5Async(String completePath, final ApiCallback<PathMd5> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPathMd5ValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PathMd5>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for uploadPathBinary */
    private com.squareup.okhttp.Call uploadPathBinaryCall(String completePath, File fileToUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, fileToUpload, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadPathBinaryValidateBeforeCall(String completePath, File fileToUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling uploadPathBinary(Async)");
        }

        // verify the required parameter 'completePath' is set
        if (fileToUpload == null) {
            throw new ApiException("Missing the required parameter 'fileToUpload' when calling uploadPathBinary(Async)");
        }

        com.squareup.okhttp.Call call = uploadPathBinaryCall(completePath, fileToUpload, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * upload a raw file
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path uploadPathBinary(String completePath, File fileToUpload) throws ApiException {
        ApiResponse<Path> resp = uploadPathBinaryWithHttpInfo(completePath, fileToUpload);
        return resp.getData();
    }

    /**
     *
     * upload a raw file
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> uploadPathBinaryWithHttpInfo(String completePath, File fileToUpload) throws ApiException {
        com.squareup.okhttp.Call call = uploadPathBinaryValidateBeforeCall(completePath, fileToUpload, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * upload a raw file
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadPathBinaryAsync(String completePath, File fileToUpload, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadPathBinaryValidateBeforeCall(completePath, fileToUpload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for createDirectory */
    private com.squareup.okhttp.Call createDirectoryCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, null, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDirectoryValidateBeforeCall(String completePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling createDirectory(Async)");
        }

        com.squareup.okhttp.Call call = createDirectoryCall(completePath, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * create a directory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path createDirectory(String completePath) throws ApiException {
        ApiResponse<Path> resp = createDirectoryWithHttpInfo(completePath);
        return resp.getData();
    }

    /**
     *
     * create a directory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> createDirectoryWithHttpInfo(String completePath) throws ApiException {
        com.squareup.okhttp.Call call = createDirectoryValidateBeforeCall(completePath, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a directory
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDirectoryAsync(String completePath, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDirectoryValidateBeforeCall(completePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for uploadData */
    private com.squareup.okhttp.Call uploadDataCall(String completePath, UploadData data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // URL encode the completePath except the slashs
        String[] completePathExploded = completePath.split("/");
        StringBuilder encodedPathBuilder = new StringBuilder();
        String prefix = "";
        for (String pathPart : completePathExploded) {
            if (pathPart.isEmpty()) continue; // skip first slash
            encodedPathBuilder.append(prefix);
            prefix = "/";
            encodedPathBuilder.append(apiClient.escapeString(pathPart));
        }

        // create path and map variables
        String localVarPath = "/path/{completePath}".replaceAll("\\{format\\}","json")
                .replaceAll("\\{" + "completePath" + "\\}", encodedPathBuilder.toString());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/carmin+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, data, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadDataValidateBeforeCall(String completePath, UploadData data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'completePath' is set
        if (completePath == null) {
            throw new ApiException("Missing the required parameter 'completePath' when calling uploadData(Async)");
        }
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling uploadData(Async)");
        }

        com.squareup.okhttp.Call call = uploadDataCall(completePath, data, progressListener, progressRequestListener);
        return call;





    }

    /**
     *
     * upload base64 data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Path uploadData(String completePath, UploadData data) throws ApiException {
        ApiResponse<Path> resp = uploadDataWithHttpInfo(completePath, data);
        return resp.getData();
    }

    /**
     *
     * upload base64 data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Path> uploadDataWithHttpInfo(String completePath, UploadData data) throws ApiException {
        com.squareup.okhttp.Call call = uploadDataValidateBeforeCall(completePath, data, null, null);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * upload base64 data
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadDataAsync(String completePath, UploadData data, final ApiCallback<Path> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadDataValidateBeforeCall(completePath, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Path>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
